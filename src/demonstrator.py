"""Defines the types of Demonstrators that can be run: clients, servers, and apps."""

from abc import ABC
from playback import PlaybackModule

import numpy as np

import state
from models.asr import ASRModel, FasterWhisper
from models.tts import TTSModel, MMS, Piper, Parler
from models.vad import VADModel, SileroVAD
from models.ser import SERModel, RAVDESS
    
class Demonstrator(ABC):
    """Abstract base class of the Demonstrator implementations.

    Attributes:
        state: The current state a Demonstrator instance is in.
        latest_user_utterance: The last recorded user utterance audio.
        latest_transcription: The transcription of the last recorded user utterance.
        latest_tts_audio_length: The length of the latest audio generated by the TTS system.
    """
    def __init__(self) -> None:
        super().__init__()
        
        self.state: state.AbstractState = state.Wakeup()
        
        self.latest_user_utterance: np.ndarray | str = None
        self.latest_transcription: str
        self.latest_text_to_synthesize: str
        self.latest_tts_audio_length: float
        self.latest_emo_label: str
        self.latest_emo_score: float
        self.latest_other_label: str
    
    def run(self) -> None:
        """Continuously runs a Demonstrator's current state logic.
        """

        while True:
            self.state.handle(self)

class DemonstratorClient(Demonstrator):
    """The Client implementation of the Demonstrator, which records and plays audio sent to and from the Server Demonstrator.

    Attributes:
        vad_model: A Voice Activity Detection model from the `vad` module used for detecting the presence of user speech.
        playback_module: The module used for playing back audio.
        api_url: The URL to which RESTful API calls are made to the server.
    """

    def __init__(self, vad_model: VADModel, playback_module: PlaybackModule, activation: str):
        super().__init__()
        
        self.vad_model: VADModel = vad_model
        self.playback_module: PlaybackModule = playback_module
        
        self.api_url: str

        self.activation: str = activation

class DemonstratorServer(Demonstrator):
    """The Server implementation of the Demonstrator, which transcribes and synthesizes the audio given by a Client Demonstrator.

    Attributes:
        asr_model: An Automatic Speech Recognition model form the `asr` module that transcribes user utterances.
        tts_model: A Text-to-Speech model from the `tts` module that synthesizes speech.
        passed_server_response_barrier: A check on whether the server is allowed to send a response to the client, True when in the `RESTResponse` state.
    """

    def __init__(self, asr_model: ASRModel, tts_model: TTSModel, fast_tts_model: TTSModel, ser_model: SERModel):
        super().__init__()
        
        self.asr_model: ASRModel = asr_model
        self.tts_model: TTSModel = tts_model
        self.fast_tts_model: TTSModel = fast_tts_model
        self.ser_model: SERModel = ser_model

        self.passed_server_response_barrier: bool = False

class DemonstratorApp(Demonstrator):
    """A standalone application that runs the entire Demonstrator process locally.

    Attributes:
        vad_model: A Voice Activity Detection model from the `vad` module used for detecting the presence of user speech.
        asr_model: An Automatic Speech Recognition model form the `asr` module that transcribes user utterances.
        tts_model: A Text-to-Speech model from the `tts` module that synthesizes speech.
        playback_module: The module used for playing back audio.
    """

    def __init__(self, vad_model: VADModel, asr_model: ASRModel, tts_model: TTSModel, fast_tts_model: TTSModel, ser_model: SERModel, playback_module: PlaybackModule, activation: str) -> None:
        super().__init__()
        
        self.vad_model: VADModel = vad_model
        self.asr_model: ASRModel = asr_model
        self.tts_model: TTSModel = tts_model
        self.fast_tts_model: TTSModel = fast_tts_model
        self.ser_model: SERModel = ser_model
        self.playback_module: PlaybackModule = playback_module

        self.activation: str = activation
            
class DemonstratorFactory:
    """A factory for creating Demonstrator instances based on a YAML configuration file.

    This class creates implementations of the Demonstrator based on the configurations in the `/configs/demonstrator_configs.yaml` and `.env` files.
    On program startup, the `DemonstratorFactory` creates a Demonstrator instance based on the mode in `.env`.
    The models used by the instance are defined in the YAML configs as a profile, with the selected profile being read from `.env`.
    Options for the configuration file are thus parsed here.

    Attributes:
        mode: The Demonstrator mode (in ["client", "server", "app"]) stored in `.env` that defines the type of Demonstrator that should be instantiated.
        config: The loaded YAML configuration file that is parsed to configure the Demonstrator instance.
        device: The device on which the Demonstrator will be ran.

        demonstrator: The Demonstrator instance created and returned by the `DemonstratorFactory`.
        vad_model: The Voice Activity Detection model assigned the Demonstrator instance.
        asr_model: The Automatic Speech Recognition model assigned the Demonstrator instance.
        tts_model: The Text-to-Speech model assigned the Demonstrator instance.
    """

    def __init__(self, mode: str, config: dict, device: str):
        self.mode = mode
        self.config = config
        self.device = device
        
        self.demonstrator: Demonstrator = None
        self.vad_model: VADModel = None
        self.asr_model: ASRModel = None
        self.tts_model: TTSModel = None
        self.fast_tts_model: TTSModel = None
        self.ser_model: SERModel = None
        
        self.activation: str = None
        
    def create_demonstrator(self) -> Demonstrator:
        """Instantiates a Demonstrator class instance based on the configurations found in the `/configs/demonstrator_configs.yaml` and `.env` files.

        Raises:
            ValueError: When an invalid value was given for the type of Demonstrator that should be created.

        Returns:
            Demonstrator: The fully configured Demonstrator instance.
        """

        self.parse_model_configs()
          
        if self.mode == "app":
            self.demonstrator = DemonstratorApp(
                vad_model=self.vad_model,
                asr_model=self.asr_model,
                tts_model=self.tts_model,
                fast_tts_model=self.fast_tts_model,
                ser_model=self.ser_model,
                playback_module=PlaybackModule(),
                activation=self.activation
            )     
        elif self.mode == "server":           
            self.demonstrator = DemonstratorServer(
                asr_model=self.asr_model,
                tts_model=self.tts_model,
                fast_tts_model=self.fast_tts_model,
                ser_model=self.ser_model
            )
        elif self.mode == "client":
            self.demonstrator = DemonstratorClient(
                vad_model=self.vad_model,
                playback_module=PlaybackModule(),
                activation=self.activation
            )
        else:
            raise ValueError(f"Value of Demonstrator mode is invalid. Should be 'app', 'server', or 'client', but found {self.mode}.")
                        
        return self.demonstrator
        
    def parse_model_configs(self):
        """Parses the YAML config file to assign the preferred models to the Demonstrator instance.

        NOTE: Changes and additions to the configuration options for a Demonstrator should be defined here!
        """

        if "language" in self.config.keys():
            language = self.config["language"]
        else:
            language = "nl"

        if "vad" in self.config.keys():
            if self.config["vad"]["name"] == "silero":
                self.vad_model = SileroVAD()
                
        if "asr" in self.config.keys():
            if self.config["asr"]["name"] == "whisper":
                self.asr_model = FasterWhisper(device=self.device, model_size=self.config["asr"]["model_size"], language=language)
                
        if "tts" in self.config.keys():
            if self.config["tts"]["name"] == "mms":
                self.tts_model = MMS(device=self.device, language=language)
                
            if self.config["tts"]["name"] == "piper":
                self.tts_model = Piper(device=self.device, language=language)
            
            if self.config["tts"]["name"] == "parler":
                self.tts_model = Parler(device=self.device, language=language)
        
        self.fast_tts_model = MMS(device=self.device, language=language)
        
        if "ser" in self.config.keys():
            if self.config["ser"]["name"] == "ravdess":
                self.ser_model = RAVDESS(device=self.device)
        
        if "activation" in self.config.keys():
            self.activation = self.config["activation"]
        